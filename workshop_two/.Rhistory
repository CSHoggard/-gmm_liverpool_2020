xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
library(xaringan)
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
vdiffr:::vdiffrAddin()
install.packages("gdtools")
xaringan:::inf_mr()
servr::daemon_stop(1)
xaringan:::inf_mr()
devtools::install_github("rstudio/fontawesome")
install.packages("remotes")
devtools::install_github("rstudio/fontawesome")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
warnings()
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
require(tcltk)
require(tcltk2)
require(parallel)
require(geomorph)
require(Rvcg)
require(Morpho)
require(digest)
install.packages("Morpho")
require(tcltk)
require(tcltk2)
require(parallel)
require(geomorph)
require(Rvcg)
require(Morpho)
require(digest)
install.packages("C:/Users/cshog/Desktop/GUImorph-master-1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph-master-1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph-master/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(Guimorph)
library(GUImorph)
GUImorph()
library(GUImorph)
.libPaths()
library(GUImorph)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph-master/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
library(GUImorph)
.libPaths()
find.package("devtools")
remove.packages("GUImorph", lib="~/R/win-library/4.0")
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
Sys.which("make")
library(GUImorph)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-gmm_liverpool_2020/workshop_two")
tutuli_lm <- Momocs::import_tps("vestergaard_and_hoggard_2019.TPS")
tutuli_data <- readr::read_csv("vestergaard_and_hoggard_2019.csv")
saveRDS(tutuli_lm, file =  here::here("tutuli_lm.rds"))
saveRDS(tutuli_data, file =  here::here("tutuli_data.rds"))
knitr::opts_chunk$set(echo = TRUE)
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_data.rds")
head(tutuli_data)
tutuli_data$site <- as.factor(tutuli_data$site)
tutuli_data$classification <- as.factor(tutuli_data$classification)
is.factor(tutuli_data$site)
is.factor(tutuli_data$classification)
tutuli_data <- column_to_rownames(tutuli_data, var = "artefact_id")
View(tutuli_data)
head(tutuli_data)
tutuli_data$site <- as.factor(tutuli_data$site)
tutuli_data$classification <- as.factor(tutuli_data$classification)
is.factor(tutuli_data$site)
is.factor(tutuli_data$classification)
tutuli_data <- column_to_rownames(tutuli_data, var = "artefact_id")
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_data.rds")
head(tutuli_data)
tutuli_data$site <- as.factor(tutuli_data$site)
tutuli_data$classification <- as.factor(tutuli_data$classification)
is.factor(tutuli_data$site)
is.factor(tutuli_data$classification)
tutuli_data <- column_to_rownames(tutuli_data, var = "artefact_id")
View(tutuli_lm)
outline<-rbind(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(6,7),c(7,8),c(8,9),c(9,10),c(10,11),c(11,12),c(12,13),c(13,14),c(14,15),c(15,16),c(16,17),c(17,18),c(18,19),c(19,20),c(20,21),c(21,22),c(22,23),c(23,24),c(24,25),c(25,26),c(26,27),c(27,28),c(28,1))
datasetldk <- Ldk(tutuli_lm, links = outline, fac = tutuli_data)
rm(datasetldk)
ldk_tutuli <- Ldk(tutuli_lm, links = outline, fac = tutuli_data)
ldk_tutuli
ldk_tutuli$coo
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_data.rds")
head(tutuli_data)
tutuli_data$date <- as.factor(tutuli_data$date)
tutuli_data$classification <- as.factor(tutuli_data$classification)
is.factor(tutuli_data$date)
is.factor(tutuli_data$classification)
tutuli_data <- column_to_rownames(tutuli_data, var = "artefact_id")
.Primitive("c")
outline<-rbind(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(6,7),c(7,8),c(8,9),c(9,10),c(10,11),c(11,12),c(12,13),c(13,14),c(14,15),c(15,16),c(16,17),c(17,18),c(18,19),c(19,20),c(20,21),c(21,22),c(22,23),c(23,24),c(24,25),c(25,26),c(26,27),c(27,28),c(28,1))
ldk_tutuli <- Ldk(tutuli_lm, links = outline, fac = tutuli_data)
ldk_tutuli
procrustesldk <- fgProcrustes(ldk_tutuli)
procrustesldk <- fgProcrustes(ldk_tutuli$coo)
ldk_tutuli <- Ldk(tutuli_lm$coo, links = outline, fac = tutuli_data)
ldk_tutuli
ldk_tutuli[18] %>% head()
ldk_tutuli[18]
ldk_tutuli$`1148-2`
ldk_tutuli$`1141III-2`
ldk_tutuli$`1141III-2`[,,]
ldk_tutuli[3:6]
panel(ldk_tutuli[2:9])
panel(ldk_tutuli)
inspect(ldk_tutuli, 5)
inspect(ldk_tutuli)
inspect(ldk_tutuli, links = TRUE)
inspect(ldk_tutuli, poly = TRUE)
coo_plot(ldk_tutuli)
coo_plot(ldk_tutuli[2])
coo_plot(ldk_tutuli[3])
coo_plot(ldk_tutuli[5])
coo_plot(ldk_tutuli[5], first.point = TRUE)
coo_plot(ldk_tutuli[5], first.point = FALSE)
coo_plot(ldk_tutuli[5], poly = TRUE)
coo_plot(ldk_tutuli[5], poly = FALSE)
coo_plot(ldk_tutuli[7], poly = FALSE)
coo_plot(ldk_tutuli[9], poly = FALSE)
coo_plot(ldk_tutuli[9], poly = FALSE)
coo_plot(ldk_tutuli[9], poly = FALSE)
coo_plot(ldk_tutuli[9], pch = 5, poly = FALSE)
coo_plot(ldk_tutuli[9], pch = 5, poly = FALSE)
coo_plot(ldk_tutuli[9], pch = 22, poly = FALSE)
coo_plot(ldk_tutuli[9], cex = 4, poly = FALSE)
coo_plot(ldk_tutuli[9], cex = 2, poly = FALSE)
coo_plot(ldk_tutuli[9], cex = 1, poly = FALSE)
coo_plot(ldk_tutuli[9], cex = 1.5, poly = FALSE)
coo_plot(ldk_tutuli[9], cex = 1.5, poly = TRUE)
coo_plot(ldk_tutuli[9], cex = 1.5, pch = 20, poly = TRUE)
coo_plot(ldk_tutuli[9], cex = 1.5, pch = 20, col = "grey", poly = TRUE)
coo_plot(ldk_tutuli[9], cex = 1.5, pch = 20, col = "gold", poly = TRUE)
coo_plot(ldk_tutuli[9], cex = 1.5, pch = 20, col = "bronze", poly = TRUE)
coo_plot(ldk_tutuli[9], cex = 1.5, pch = 20, col = "brown", poly = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
gpa_tutuli <- fgProcrustes(ldk_tutuli)
gpa_tutuli
stack(gpa_tutuli)
gpa_tutuli <- fgProcrustes(ldk_tutuli, tol = 0.1)
coo_plot(ldk_tutuli[9], cex = 1.5, pch = 20, col = "grey", poly = TRUE, centroid = FALSE, border = FALSE)
coo_plot(ldk_tutuli[9], cex = 1.5, pch = 20, col = "grey", poly = TRUE, centroid = FALSE, border = TRUE)
PCA(gpa_tutuli)
pca_tutuli <- PCA(gpa_tutuli)
scree_plot(pca_tutuli)
scree(pca_tutuli)
scree_min(pca_tutuli)
scree(pca_tutuli)
scree_plot(pca_tutuli, 1:10)
plot_PCA(pca_tutuli)
plot_PCA(pca_tutuli, ~identification)
plot_PCA(pca_tutuli, fac = identification)
plot_PCA(pca_tutuli, ~classification)
plot_PCA(pca_tutuli, ~classification, pos.shp = "range_axes")
plot_PCA(pca_tutuli, ~classification, morphospace_position = "range")
plot_PCA(pca_tutuli, ~classification, morphospace_position = "range_axes")
plot_PCA(pca_tutuli, ~classification, morphospace_position = "full_axes")
plot_PCA(pca_tutuli, ~classification, morphospace_position = "range_axes")
plot_PCA(pca_tutuli, ~classification, morphospace_position = "range_axes", chull = false)
plot_PCA(pca_tutuli, ~classification, morphospace_position = "range_axes", chull = FALSE)
plot_PCA(pca_tutuli, ~classification, morphospace_position = "range_axes", chull = FALSE, ellipses = TRUE)
plot_PCA(pca_tutuli, ~classification) + morphospace_position("range_axes") + layer_chull = FALSE)
plot_PCA(pca_tutuli, ~classification) + morphospace_position("range_axes")
plot_PCA(pca_tutuli, ~classification) + layer_morphospace_PCA(position = "range_axes") + layer_ellipses(conf = 0.75)
plot_PCA(pca_tutuli, ~classification) + layer_morphospace_PCA(position = "range_axes") + layer_ellipses(~classification, conf = 0.75)
plot_PCA(pca_tutuli, ~classification) + layer_morphospace_PCA(position = "range_axes") + layer_ellipses(conf = 0.75)
plot_PCA(pca_tutuli, ~classification, chull = FALSE) + layer_morphospace_PCA(position = "range_axes)
plot_PCA(pca_tutuli, ~classification, chull = FALSE) + layer_morphospace_PCA(position = "range_axes")
plot_PCA(pca_tutuli, ~classification) + layer_morphospace_PCA(position = "range_axes")
plot_PCA(pca_tutuli, ~classification, chull = FALSE)
plot_PCA(pca_tutuli, ~classification, chull = FALSE)
plot_PCA(pca_tutuli, ~classification, chull = FALSE, morphospace_position = "range_axes")
plot_PCA(pca_tutuli, ~classification, chull = FALSE, morphospace_position = "range_axes")
plot_PCA(pca_tutuli, ~classification, chull = FALSE, morphospace_position = "range_axes", zoom = 2)
plot_PCA(pca_tutuli, ~classification, chull = FALSE, morphospace_position = "range_axes", zoom = 1.5)
plot_PCA(pca_tutuli, ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1.5)
plot_PCA(pca_tutuli, ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1.5)
plot_PCA(pca_tutuli, ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1.5)
plot_PCA(pca_tutuli, xax = 1, yax = 2, ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1.5)
plot_PCA(pca_tutuli, axes = c(1,2), ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1.5)
plot_PCA(pca_tutuli, axes = c(2,4), ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1.5)
plot_PCA(pca_tutuli, axes = c(1,2), ~date, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1)
boxplot(pca_tutuli, ~date, nax = 1:5)
plot_MSHAPES(pca_tutuli)
plot_MSHAPES(ldk_tutuli)
plot_MSHAPES(gpa_tutuli)
MSHAPES(gpa_tutuli)
MSHAPES(gpa_tutuli, ~classification)
plot_MSHAPES(gpa_tutuli, ~classification)
gpa_tutuli %>% MSHAPES(~classification) %>% plot_MSHAPES()
dashape <- LDA(gpa_tutuli, ~classification)
rm(dashape)
lda_tutuli <- LDA(gpa_tutuli, ~classification)
lda_tutuli$CV.correct
lda_tutuli$CV.ce
lda_tutuli_date <- LDA(gpa_tutuli, ~date)
lda_tutuli_date <- LDA(gpa_tutuli, ~date)
lda_tutuli_date$CV.correct
lda_tutuli_date$CV.ce
manova_tutuli <- MANOVA(gpa_tutuli, ~classification)
manova_tutuli_class <- MANOVA(pca_tutuli, ~classification)
manova_tutuli_date <- MANOVA(pca_tutuli, ~date)
manova_tutuli_class
manova_tutuli_date
PW_MANOVA(manova_tutuli_class)
MANOVA_PW(manova_tutuli_class)
manova_tutuli_class_pw
manova_tutuli_class_pw <- MANOVA_PW(pca_tutuli, ~classification)
manova_tutuli_class <- MANOVA(pca_tutuli, ~classification)
manova_tutuli_class <- MANOVA(pca_tutuli, ~classification)
manova_tutuli_date <- MANOVA(pca_tutuli, ~date)
manova_tutuli_class_pw <- MANOVA_PW(pca_tutuli, ~classification)
manova_tutuli_date_pw <- MANOVA_PW(pca_tutuli, ~date)
skull  <- readmulti.nts(c("SK1.nts","SK2.nts","SK3.nts","SK4.nts","SK5.nts","SK6.nts"))
saveRDS(skull, file =  here::here("skull.rds"))
skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull.rds")
is.array(skull)
skull
skull[1]
skull[,1]
skull[,,1]
skull[,,1]
surface_lm_skull <- read.csv("surfslide_skull.csv", header=TRUE)
surface_lm_skull <- as.matrix(surface_lm_skull)
saveRDS(surface_lm_skull, file =  here::here("surface_lm_skull.rds"))
skull_data <- read.csv("skull_data.csv", header = TRUE, row.names = 1)
saveRDS(skull_data, file =  here::here("skull_data.rds"))
surface_lm_skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/surface_lm_skull.rds")
skull_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull_data.rds")
skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull.rds")
surface_lm_skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/surface_lm_skull.rds")
skull_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull_data.rds")
head(skull_data)
skull_data$Sex <- as.factor(skull_data$Sex)
gpa_skull <- gpagen(skull, Proj = TRUE, ProcD = TRUE, curves = NULL, surfaces = surface_lm_skull)
plot(gpa_skull)
plot(gpa_skull, color ="lightgray")
plot(skull[,,1])
rgl.open()
plot(skull[,,1])
rgl.points(skull[,,1])
rgl.points(gpa_skull)
rgl.points(gpa_skull$coords)
rgl.points(gpa_skull$coords[1])
rgl.points(gpa_skull$coords[,1])
rgl.points(gpa_skull$coords[,,1])
rgl.points(skull[,,1], r = 0.2)
plotspec(skull)
plotspec(skull[,,1])
plotspec(skull[,,1], r = 0.2)
```{r chunk30, echo=TRUE, eval=FALSE, message=FALSE}
gpa_skull
mean_skull <- mshape(gpa_skull$coords)
mean_skull
plot(mean_skull)
rgl.open()
rgl.points(mean_skull)
rgl.open()
rgl.points(mean_skull)
plotOutliers(gpa_skull)
plotOutliers(skull)
pca_skull <- gm.prcomp(gpa_skull$coords)
pca_skull
summary(pca_skull)
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", legend = TRUE, pch = 19, cex  = 1.5, col = skull_data$Sex)
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex)
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex)
legend("topleft", pch=22, pt.bg = unique(dataset$sex), legend = levels(dataset$sex))
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex)
legend("topleft", pch=22, pt.bg = unique(skull_data$sex), legend = levels(skull_data$sex))
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex)
legend("topleft", pch=22, pt.bg = unique(skull_data$sex), legend = levels(skull_data$sex))
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, legend = TRUE)
legend("topleft", pch=22, pt.bg = unique(skull_data$sex), legend = levels(skull_data$sex))
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, legend = TRUE)
legend("topleft", pch=22, pt.bg = unique(skull_data$Sex), legend = levels(skull_data$Sex))
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, legend = TRUE)
legend("topleft", pch=22, pt.bg = unique(skull_data$Sex), legend = levels(skull_data$Sex))
mean_skull <- as.matrix(mean_skull)
mean_skull <- mshape(gpa_skull$coords)
mean_skull <- mshape(gpa_skull$coords)
plotRefToTarget(pca_skull$shapes.comp1$min, meanshape, method = "TPS")
plotRefToTarget(pca_skull$shapes.comp1$min, mean_skull, method = "TPS")
pca_skull$shapes$shapes.comp1$min
plot(pca_skull$shapes$shapes.comp1$min)
plotRefToTarget(pca_skull$shapes.comp1$min, mean_skull, method = "TPS")
plotRefToTarget(pca_skull$shapes.comp1$min, mean_skull, method = "TPS")
plotRefToTarget(pca_skull$shapes.comp1$min, mean_skull)
mean_skull <- mshape(gpa_skull$coords)
mean_skull_matrix <- as.matrix(mean_skull)
mean_skull <- mshape(gpa_skull$coords)
plotRefToTarget(pca_skull$shapes.comp1$min, mean_skull, method = "TPS")
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min, method = "TPS")
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min, method = "TPS")
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min, method = "TPS")
rm(mean_skull_matrix)
pca_skull$shapes.comp1$min
skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull.rds")
skull[,,1]
rgl.open()
rgl.points(skull[,,1], r = 0.2)
skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull.rds")
rgl.open()
rgl.points(skull[,,1], r = 0.2)
surface_lm_skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/surface_lm_skull.rds")
skull_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull_data.rds")
head(skull_data)
skull_data$Sex <- as.factor(skull_data$Sex)
is.factor(skull_data)
is.factor(skull_data$Sex)
gpa_skull <- gpagen(skull, Proj = TRUE, ProcD = TRUE, curves = NULL, surfaces = surface_lm_skull)
plot(gpa_skull)
mean_skull <- mshape(gpa_skull$coords)
pca_skull <- gm.prcomp(gpa_skull$coords)
summary(pca_skull)
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, legend = TRUE)
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, legend = TRUE)
legend("topleft", pch=22, pt.bg = unique(skull_data$Sex), legend = levels(skull_data$Sex)) would also call the legend
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, legend = TRUE)
legend("topleft", pch=22, pt.bg = unique(skull_data$Sex), legend = levels(skull_data$Sex))
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min, method = "TPS")
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min, method = "TPS")
rgl()
rgl.open()
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min, method = "TPS")
pca_skull$shapes$shapes.comp1
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min)
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min)
plot(gpa_skull)
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$min)
plotRefToTarget(pca_skull$shapes.comp1$min, mean_skull)
plotRefToTarget(pca_skull$shapes.comp1$max, mean_skull)
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$max)
skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull.rds")
surface_lm_skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/surface_lm_skull.rds")
skull_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull_data.rds")
head(skull_data)
skull_data$Sex <- as.factor(skull_data$Sex)
is.factor(skull_data$Sex)
gpa_skull <- gpagen(skull, Proj = TRUE, ProcD = TRUE, curves = NULL, surfaces = surface_lm_skull)
plot(gpa_skull)
mean_skull <- mshape(gpa_skull$coords)
pca_skull <- gm.prcomp(gpa_skull$coords)
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$max)
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$max, methods = "TPS")
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$max, methods = "TPS")
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$max, methods = "TPS"d)
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$max, methods = "TPS")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
library(geomorph)
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_data.rds")
skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull.rds")
surface_lm_skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/surface_lm_skull.rds")
skull_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull_data.rds")
skull_data$Sex <- as.factor(skull_data$Sex)
gpa_skull <- gpagen(skull, Proj = TRUE, ProcD = TRUE, curves = NULL, surfaces = surface_lm_skull)
mean_skull <- mshape(gpa_skull$coords)
pca_skull <- gm.prcomp(gpa_skull$coords)
plotRefToTarget(mean_skull, pca_skull$shapes.comp1$max, methods = "TPS")
gpa_skull <- gpagen(skull, Proj = TRUE, ProcD = TRUE, curves = NULL, surfaces = surface_lm_skull, print.progress = F)
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, font.lab = 2)
mean_skull <- mshape(gpa_skull$coords)
plotRefToTarget(pca_skull$shapes.comp1$max, mean_skull)
plotRefToTarget(pca_skull$shapes.comp1$max, mean_skull)
mshape(gpa_skull$coords)
mean_skull
mean_skull <- mshape(gpa_skull$coords)
plotRefToTarget(pca_skull$shapes.comp1$max, mean_skull)
plotRefToTarget(pca_skull$shapes.comp1$max, pca_skull$shapes$shapes.comp1$min)
skulldf <- geomorph.data.frame(gpa_skull, sex = skull_data$Sex)
anova(procD.lm(coords ~ sex, data = skulldf))
setwd("C:/Users/cshog/Desktop/patella/gmm_dataset")
landmark_files <- list.files(pattern = ".nts")
landmark_files
patella_lm <- readmulti.nts(landmark_files)
saveRDS(patella_lm, file =  here::here("patella_lm.rds"))
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-gmm_liverpool_2020/workshop_two")
saveRDS(patella_lm, file =  here::here("patella_lm.rds"))
links <- read.csv(patella_links.csv)
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-gmm_liverpool_2020/workshop_two")
links <- read.csv(patella_links.csv)
links <- read.csv("patella_links.csv")
patella_links <- read.csv("patella_links.csv")
saveRDS(patella_links, file =  here::here("patella_links.rds"))
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-gmm_liverpool_2020/workshop_two")
patella_dataset <- read.csv("patella_dataset.csv")
saveRDS(patella_dataset, file =  here::here("patella_dataset.rds"))
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-gmm_liverpool_2020/workshop_two")
patella_surfslide <- read.csv("patella_surfslide.csv", header = TRUE)
patella_dataset <- read.csv("patella_dataset.csv", row.names = 1)
saveRDS(patella_dataset, file =  here::here("patella_dataset.rds"))
patella_surfslide <- read.csv("patella_surfslide.csv", header = TRUE)
saveRDS(patella_surfslide, file =  here::here("patella_surfslide.rds"))
saveRDS(patella_lm, file =  here::here("patella_lm.rds"))
saveRDS(patella_links, file =  here::here("patella_links.rds"))
saveRDS(patella_dataset, file =  here::here("patella_dataset.rds"))
saveRDS(patella_surfslide, file =  here::here("patella_surfslide.rds"))
patella_dataset <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_dataset.rds")
patella_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_lm.rds")
patella_surfslide <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_surfslide.rds")
patella_links <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_links.rds")
View(patella_surfslide)
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_data.rds")
tutuli_data$date <- as.factor(tutuli_data$date)
tutuli_data$classification <- as.factor(tutuli_data$classification)
tutuli_data <- column_to_rownames(tutuli_data, var = "artefact_id")
outline<-rbind(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(6,7),c(7,8),c(8,9),c(9,10),c(10,11),c(11,12),c(12,13),c(13,14),c(14,15),c(15,16),c(16,17),c(17,18),c(18,19),c(19,20),c(20,21),c(21,22),c(22,23),c(23,24),c(24,25),c(25,26),c(26,27),c(27,28),c(28,1))
ldk_tutuli <- Ldk(tutuli_lm$coo, links = outline, fac = tutuli_data)
ldk_tutuli[3]
coo_plot(ldk_tutuli[9], cex = 1.5, pch = 20, col = "grey", poly = TRUE, centroid = FALSE, border = TRUE)
gpa_tutuli <- fgProcrustes(ldk_tutuli, tol = 0.1)
pca_tutuli <- PCA(gpa_tutuli)
scree(pca_tutuli)
plot_PCA(pca_tutuli, axes = c(1,2), ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1)
plot_PCA(pca_tutuli, axes = c(1,2), ~date, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1)
boxplot(pca_tutuli, ~date, nax = 1:5)
gpa_tutuli %>% MSHAPES(~classification) %>% plot_MSHAPES()
lda_tutuli_class <- LDA(gpa_tutuli, ~classification)
lda_tutuli_date <- LDA(gpa_tutuli, ~date)
lda_tutuli_class$CV.correct
lda_tutuli_class$CV.ce
lda_tutuli_date$CV.ce
manova_tutuli_class <- MANOVA(pca_tutuli, ~classification)
manova_tutuli_date <- MANOVA(pca_tutuli, ~date)
manova_tutuli_class_pw <- MANOVA_PW(pca_tutuli, ~classification)
manova_tutuli_class_pw <- MANOVA_PW(pca_tutuli, ~classification)
manova_tutuli_date_pw <- MANOVA_PW(pca_tutuli, ~date)
skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull.rds")
rgl.open()
rgl.points(skull[,,1], r = 0.2)
surface_lm_skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/surface_lm_skull.rds")
skull_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull_data.rds")
skull_data$Sex <- as.factor(skull_data$Sex)
is.factor(skull_data$Sex)
gpa_skull <- gpagen(skull, Proj = TRUE, ProcD = TRUE, curves = NULL, surfaces = surface_lm_skull, print.progress = F)
plot(gpa_skull)
pca_skull <- gm.prcomp(gpa_skull$coords)
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, font.lab = 2)
skulldf <- geomorph.data.frame(gpa_skull, sex = skull_data$Sex)
anova(procD.lm(coords ~ sex, data = skulldf))
patella_dataset <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_dataset.rds")
patella_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_lm.rds")
patella_links <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_links.rds")
patella_surfslide <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_surfslide.rds")
patella_dataset <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_dataset.rds")
patella_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_lm.rds")
patella_links <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_links.rds")
patella_surfslide <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_surfslide.rds")
head(patella_dataset)
patella_datset$sex <- as.factor(patella_dataset$sex)
patella_dataset$sex <- as.factor(patella_dataset$sex)
is.factor(patella_dataset$sex)
View(patella_dataset)
is.matrix(patella_surfslide)
patella_surfslide <- as.matrix(patella_surfslide)
