shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
hclust(dist(pcashape$x))
tree <- hclust(dist(pcashape$x))
library(Rphylip)
contmltree <- RContml(tree)
contmltree <- Rcontml(tree)
contmltree <- Rcontml(hclust(dist(pcashape$x)))
(hclust(dist(pcashape$x)))
as.matrix((hclust(dist(pcashape$x))))
Rcontml(as.matrix((hclust(dist(pcashape$x)))))
treeml <- Rcontml(as.matrix((hclust(dist(pcashape$x)))))
pcashape[1:50]
pcashape$x[,1:50]
pcashape$x[1:50]
pcashape$x[,1:50]
pcashape$x[,,1:50]
treeml <- Rcontml(as.matrix((hclust(dist(pcashape$x)))))
treeml <- Rcontml(((hclust(dist(pcashape$x)))))
pcashape
pcashape <- PCA(efashape)
pcashape <- PCA(efashape)
library(Momocs)
pcashape <- PCA(efashape)
treeml <- Rcontml(((hclust(dist(pcashape$x)))))
pcashape$x
pcashape$x[1:50]
pcashape$x[,1:50]
pcashape$x[1:50,]
testtree <- Rcontml(pcashape$x[1:50,])
library(ggtree)
ggtree(testtree)
ggtree(testtree, layout = "circular")
ggtree(testtree, layout = "circular", branch.length = "none")
ggtree(testtree, layout = "circular", branch.length = "none") + geom_point2()
ggtree(testtree, layout = "circular", branch.length = "none") + geom_tippoint()
outlines_combined_nicholas_2016 <- readRDS("C:/Users/cshog/Desktop/outlines_combined_nicholas_2016.RDS")
outlines_combined_nicholas_2016
test <- outlines_combined_nicholas_2016
library('Momocs')
test
panel(test)
stack(test)
test <- coo_centre(test)
test <- coo_scale(test)
stack(test)
calibrate_harmonicpower_efourier(test)
calibrate_harmonicpower_efourier(outlines_combined_nicholas_2016)
eftest <- efourier(test, nb.h = 7)
PCA(eftest)
plot.PCA(eftest)
eftest %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 7, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% PCcontrib()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA(nax = 1:5)
test %>% efourier(nb.h = 19, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% PCcontrib(nax = 1:5)
outlines_combined_nicholas_2016 <- readRDS("C:/Users/cshog/Desktop/outlines_combined_nicholas_2016.RDS")
library("Momocs")
calibrate_harmonicpower_efourier(outlines_combined_nicholas_2016)
sum.of.squares <- function(x,y) {x^2 + y^2}
x <- 2
y <- 3
sum.of.squares(2,3)
sum.of.squares(3,4)
pcashape
View(database)
install.packages("shinydashboard")
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
install.packages("flexdashboard")
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
head(mtcars, n = input$rows)
renderTable({
head(mtcars)
})
install.packages("DT")
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)
shape <- Out(tpsdata$coo, fac = database)
shape <- coo_center(shape)
shape <- coo_scale(shape)
library(flexdashboard)
library(shiny)
library(DT)
library(Momocs)
library(tidyverse)
library(rio)
library(ggplot2)
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)
shape <- Out(tpsdata$coo, fac = database)
shape <- coo_center(shape)
shape <- coo_scale(shape)
shape <- coo_close(shape)
efashape <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)
pcashape <- PCA(efashape)
dfshape <- as_df(pcashape)
View(dfshape)
library(archdata)
database <- archdata::Handaxes
database <- archdata(Handaxes)
database <- Handaxes
database <- data(Handaxes)
data(Handaxes)
rm(database)
head(Handaxes)
View(Handaxes)
Handaxes[1:5]
Handaxes[,1:5]
Handaxes[1]
Handaxes[,1]
Handaxes[,,1]
Handaxes[1,]
Handaxes[1:5,]
summary(Handaxes)
rm(Handaxes)
data(DartPoints)
View(DartPoints)
dist(DartPoint[,5:6])
dist(DartPoints[,5:6])
clust(dist(DartPoints[,5:6]))
hclust(dist(DartPoints[,5:6]))
plot(hclust(dist(DartPoints[,5:6])))
DartPoints
median(DartPoints$Length)
range(DartPoints$Length)
mean(DartPoints$Length)
plot(norm())
hist(DartPoints$Length)
sd(DartPoints$Length)
library(tidyverse)
ggplot(DartPoints, aes(Length)) + geom_hist()
ggplot(DartPoints, aes(Length)) + geom_histogram()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_histogram()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_area()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_bin2d()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_curve()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_density()
t.test(DartPoints$Length[group == Darl], DartPoints == Ensor)
t.test(DartPoints$Length[Name == Darl], DartPoints[Name == Ensor])
t.test(DartPoints[Name == Darl], DartPoints[Name == Ensor])
new_database <- filter(DartPoints, Name == Ensor, Name == Darl)
new_database <- filter(DartPoints, Name == Ensor | Name == Darl)
new_database <- filter(DartPoints, Name == "Ensor" | Name == "Darl")
View(new_database)
new_database <- select(DartPoints, Name, Length)
View(new_database)
new_database <- filter(DartPoints, Name == "Ensor" | Name == "Darl")
new_database <- select(new_database, Name, Length)
new_database <- filter(DartPoints, Name == "Ensor" | Name == "Darl") %>% select(Name, Length)
ggplot(new_database, aes(Length, colour = Name)) + geom_density()
skew(DartPoints$Length)
wilcox.test(Length ~ Name, data = new_database)
### MEASURES OF CENTRAL TENDENCY (EXPLORATORY)
head(DartPoints)
### MEASURES OF CENTRAL TENDENCY (EXPLORATORY)
DartPoints$Name
new_database <- filter(DartPoints, Name == "Wells" | Name == "Pedernales") %>% select(Name, Length)
ggplot(new_database, aes(Length, colour = Name)) + geom_density()
wilcox.test(Length ~ Name, data = new_database)
new_database <- filter(DartPoints, Name == "Wells" | Name == "Pedernales" | Name == "Travis") %>% select(Name, Length)
ggplot(new_database, aes(Length, colour = Name)) + geom_density()
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anova(Length ~ Name, data = new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anova(Name ~ Length, data = new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anova(new_database$Name ~ new_database$Length)
new_database <- filter(DartPoints, Name == "Wells" | Name == "Pedernales" | Name == "Travis") %>% select(Name, Length)
View(new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
lm(new_database$Name ~ new_database$Length)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
lm(Name ~ Length, data = new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anove(lm(Name ~ Length, data = new_database))
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anova(lm(Name ~ Length, data = new_database))
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
lm(Name ~ Length, data = new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
stattest <- lm(Name ~ Length, data = new_database)
stattest$model
stattest
anova(stattest)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_density() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_histogram() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_abline() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_point() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_dotplot() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_density() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_quantile() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_point() + geom_quantile() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_rug() + geom_point() + geom_quantile() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_rug() + geom_point() + geom_smooth() ### (EXPLORATORY)
<style>
.small-code pre code {
font-size: 1em;
}
</style>
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
install.packages("xaringan")
options(htmltools.dir.version = FALSE)
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
library(xaringan)
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
vdiffr:::vdiffrAddin()
install.packages("gdtools")
xaringan:::inf_mr()
servr::daemon_stop(1)
xaringan:::inf_mr()
devtools::install_github("rstudio/fontawesome")
install.packages("remotes")
devtools::install_github("rstudio/fontawesome")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
warnings()
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
require(tcltk)
require(tcltk2)
require(parallel)
require(geomorph)
require(Rvcg)
require(Morpho)
require(digest)
install.packages("Morpho")
require(tcltk)
require(tcltk2)
require(parallel)
require(geomorph)
require(Rvcg)
require(Morpho)
require(digest)
install.packages("C:/Users/cshog/Desktop/GUImorph-master-1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph-master-1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph-master/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(Guimorph)
library(GUImorph)
GUImorph()
library(GUImorph)
.libPaths()
library(GUImorph)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph-master/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
library(GUImorph)
.libPaths()
find.package("devtools")
remove.packages("GUImorph", lib="~/R/win-library/4.0")
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
Sys.which("make")
library(GUImorph)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
install.packages("blogdown")
blogdown::install_hugo(version = "0.73.0", force = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
2 + 2
236483642 + 4736253
2/3
Lucy <- 2 + 2
Lucy
Lucy * 2
rm(Lucy)
iris
setwd("C:/Users/cshog/Desktop")
dataset <- read.csv("patella_dataset.csv")
View(dataset)
install.packages('fun', repos='http://cran.us.r-project.org')
lights_out()
library(fun)
lights_out()
gomoku()
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
2 + 2
46743775 - 47473 * 36354
Christian <- 2 + 2
Christian
Christian <- 2 + 2
Christian + 2
rm(Christian)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_data.rds")
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
View(tutuli_data)
head(tutuli_data)
tutuli_data$site
tutuli_data$date
tutuli_data$date <- as.factor(tutuli_data$date)
tutuli_data$classification <- as.factor(tutuli_data$classification)
is.factor(tutuli_data$date)
is.factor(tutuli_data$classification)
head(tutuli_data)
View(tutuli_data)
tutuli_data <- column_to_rownames(tutuli_data, var = "artefact_id")
outline<-rbind(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(6,7),c(7,8),c(8,9),c(9,10),c(10,11),c(11,12),c(12,13),c(13,14),c(14,15),c(15,16),c(16,17),c(17,18),c(18,19),c(19,20),c(20,21),c(21,22),c(22,23),c(23,24),c(24,25),c(25,26),c(26,27),c(27,28),c(28,1))
View(outline)
ldk_tutuli <- Ldk(tutuli_lm$coo, links = outline, fac = tutuli_data)
ldk_tutuli[3]
ldk_tutuli[55]
coo_plot(ldk_tutuli[8], cex = 1.5, pch = 20, col = "grey", poly = TRUE, centroid = FALSE, border = TRUE)
coo_plot(ldk_tutuli[8], cex = 5.5, pch = 20, col = "grey", poly = TRUE, centroid = FALSE, border = TRUE)
coo_plot(ldk_tutuli[8], cex = 1.5, pch = 20, col = "grey", poly = TRUE, centroid = FALSE, border = TRUE)
coo_plot(ldk_tutuli[8], cex = 1.5, pch = 20, col = "green", poly = TRUE, centroid = FALSE, border = TRUE)
coo_plot(ldk_tutuli[4], cex = 1.5, pch = 20, col = "green", poly = TRUE, centroid = FALSE, border = TRUE)
coo_plot(ldk_tutuli[6], cex = 1.5, pch = 21, col = "grey", poly = TRUE, centroid = FALSE, border = TRUE)
library(geomorph)
library(Momocs)
library(tidyverse)
library(rio)
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_data.rds")
head(tutuli_data)
tutuli_data$date <- as.factor(tutuli_data$date)
tutuli_data$classification <- as.factor(tutuli_data$classification)
is.factor(tutuli_data$date)
is.factor(tutuli_data$classification)
tutuli_data <- column_to_rownames(tutuli_data, var = "artefact_id")
outline<-rbind(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(6,7),c(7,8),c(8,9),c(9,10),c(10,11),c(11,12),c(12,13),c(13,14),c(14,15),c(15,16),c(16,17),c(17,18),c(18,19),c(19,20),c(20,21),c(21,22),c(22,23),c(23,24),c(24,25),c(25,26),c(26,27),c(27,28),c(28,1))
ldk_tutuli[55]
ldk_tutuli <- Ldk(tutuli_lm$coo, links = outline, fac = tutuli_data)
ldk_tutuli[55]
coo_plot(ldk_tutuli[6], cex = 1.5, pch = 21, col = "grey", poly = TRUE, centroid = FALSE, border = TRUE)
stack(gpa_tutuli, title = "Example Stack")
gpa_tutuli <- fgProcrustes(ldk_tutuli, tol = 0.1)
stack(gpa_tutuli, title = "Example Stack")
pca_tutuli <- PCA(gpa_tutuli)
scree(pca_tutuli)
scree_plot(pca_tutuli, 1:10)
plot_PCA(pca_tutuli, axes = c(1,2), ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1)
plot_PCA(pca_tutuli, axes = c(1,3), ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1)
plot_PCA(pca_tutuli, axes = c(1,2), ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1)
plot_PCA(pca_tutuli, axes = c(1,2), ~classification, chull = FALSE, chullfilled = TRUE, morphospace_position = "full_axes", zoom = 1)
plot_PCA(pca_tutuli, axes = c(1,2), ~date, chull = FALSE, chullfilled = TRUE, morphospace_position = "range_axes", zoom = 1)
boxplot(pca_tutuli, ~date, nax = 1:5)
gpa_tutuli %>% MSHAPES(~classification) %>% plot_MSHAPES()
lda_tutuli_class <- LDA(gpa_tutuli, ~classification)
lda_tutuli_date <- LDA(gpa_tutuli, ~date)
lda_tutuli_class$CV.correct
lda_tutuli_class$CV.ce
lda_tutuli_date$CV.correct
lda_tutuli_date$CV.ce
lda_tutuli_class$CV.correct
lda_tutuli_class$CV.ce
lda_tutuli_date$CV.correct
lda_tutuli_date$CV.ce
manova_tutuli_class <- MANOVA(pca_tutuli, ~classification)
manova_tutuli_date <- MANOVA(pca_tutuli, ~date)
manova_tutuli_class_pw <- MANOVA_PW(pca_tutuli, ~classification)
manova_tutuli_date_pw <- MANOVA_PW(pca_tutuli, ~date)
rm(list = ls())
tutuli_data$date <- as.factor(tutuli_data$date)
tutuli_data$classification <- as.factor(tutuli_data$classification)
tutuli_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_lm.rds")
tutuli_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/tutuli_data.rds")
tutuli_data$date <- as.factor(tutuli_data$date)
tutuli_data$classification <- as.factor(tutuli_data$classification)
tutuli_data <- column_to_rownames(tutuli_data, var = "artefact_id")
ldk_tutuli <- Ldk(tutuli_lm$coo, links = outline, fac = tutuli_data)
outline<-rbind(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(6,7),c(7,8),c(8,9),c(9,10),c(10,11),c(11,12),c(12,13),c(13,14),c(14,15),c(15,16),c(16,17),c(17,18),c(18,19),c(19,20),c(20,21),c(21,22),c(22,23),c(23,24),c(24,25),c(25,26),c(26,27),c(27,28),c(28,1))
outline<-rbind(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(6,7),c(7,8),c(8,9),c(9,10),c(10,11),c(11,12),c(12,13),c(13,14),c(14,15),c(15,16),c(16,17),c(17,18),c(18,19),c(19,20),c(20,21),c(21,22),c(22,23),c(23,24),c(24,25),c(25,26),c(26,27),c(27,28),c(28,1))
We can now perform the `Momocs::Ldk()` argument:
```{r, chunk8, message=FALSE, warning=FALSE}
ldk_tutuli <- Ldk(tutuli_lm$coo, links = outline, fac = tutuli_data)
rm(list = ls())
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-gmm_liverpool_2020/workshop_two")
SK1 <- read.ply("skull_1.ply", ShowSpecimen = FALSE, addNormals = FALSE)
SK1 <- read.ply("skull_1.ply", ShowSpecimen = FALSE, addNormals = FALSE)
SK1 <- read.ply("skull_1.ply", ShowSpecimen = FALSE, addNormals = FALSE)
ChrisPatella <- buildtemplate(SK1, 5, 200)
skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull.rds")
skull[,,1]
surface_lm_skull <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/surface_lm_skull.rds")
skull_data <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/skull_data.rds")
head(skull_data)
skull_data$Sex <- as.factor(skull_data$Sex)
is.factor(skull_data$Sex)
head(skull_data)
skull_data$Sex <- as.factor(skull_data$Sex)
is.factor(skull_data$Sex)
gpa_skull <- gpagen(skull, Proj = TRUE, ProcD = TRUE, curves = NULL, surfaces = surface_lm_skull, print.progress = F)
plot(gpa_skull, mean = TRUE, label = FALSE, plot.param = list(pt.cex = 0.5, mean.bg = "red"))
pca_skull <- gm.prcomp(gpa_skull$coords)
summary(pca_skull)
plot(pca_skull, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = skull_data$Sex, font.lab = 2)
plotRefToTarget(pca_skull$shapes$shapes.comp1$min, pca_skull$shapes$shapes.comp1$max, method = "points")
skulldf <- geomorph.data.frame(gpa_skull, sex = skull_data$Sex)
anova(procD.lm(coords ~ sex, data = skulldf))
rm(list = ls())
patella_dataset <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_dataset.rds")
patella_lm <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_lm.rds")
patella_links <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_links.rds")
patella_surfslide <- rio::import("https://github.com/CSHoggard/-gmm_liverpool_2020/raw/master/workshop_two/patella_surfslide.rds")
head(patella_dataset)
patella_dataset$sex <- as.factor(patella_dataset$sex)
is.factor(patella_dataset$sex)
patella_surfslide <- as.matrix(patella_surfslide)
patella_lm[,,1]
patella_lm[,,1]
# OR
# rgl.open()
# rgl.points(patella_lm[,,1], r = 0.2)
rgl.open()
rgl.points(patella_lm[,,1], r = 0.2)
gpa_patella <- gpagen(patella_lm, Proj = TRUE, ProcD = TRUE, curves = NULL, surfaces = patella_surfslide)
plot(gpa_patella, links = patella_links, plot.param = list(pt.cex = 0.5, mean.cex = 5, mean.bg = "red"))
pca_patella <- gm.prcomp(gpa_patella$coords)
summary(pca_patella)
plot(pca_patella, axis1 = 1, axis2 = 2, main = "Principal Component Analysis (PC1 vs. PC2)", pch = 19, cex  = 1.5, col = patella_dataset$sex, font.lab = 2)
pca.scores <- as_tibble(pca_patella$x, rownames = "rownames") %>% column_to_rownames("rownames")
data <- as_tibble(patella_dataset, rownames = "rownames") %>% column_to_rownames("rownames")
pca.sex.scores <- bind_cols(data, pca.scores)
ggplot(pca.sex.scores, aes(Comp1, Comp2, colour = sex)) + geom_point(size = 3) + stat_ellipse(level = 0.66) + coord_fixed() + labs(x = "Principal Component 1", y = "Principal Component 2")
plot(pca_patella, axis1 = 1, axis2 = 2)
plot1 <- plot(pca_patella, axis1 = 1, axis2 = 2)
picknplot.shape(plot1, method = "vector", links = patella_links)
plotRefToTarget(pca_patella$shapes$shapes.comp1$min, pca_patella$shapes$shapes.comp1$max)
plotRefToTarget(pca_patella$shapes$shapes.comp1$min, pca_patella$shapes$shapes.comp1$max)
df_patella <- geomorph.data.frame(gpa_patella, sex = patella_dataset$sex)
anova(procD.lm(coords ~ sex, data = df_patella))
coords_gpa <- as_tibble(two.d.array(gpa_patella$coords), rownames = "rownames") %>% column_to_rownames("rownames")
coords_gpa <- as_tibble(two.d.array(gpa_patella$coords), rownames = "rownames") %>% column_to_rownames("rownames")
plot(hclust(dist(coords_gpa)), hang = -1, cex = 0.6)
