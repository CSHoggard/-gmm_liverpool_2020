efashapenew
shape2 <- shape[1:50]
shape2efa <- efourier(shape2, nb.h = 10)
PCA(shape2efa)
shape2efa
pcashape$x
pcashape$x[1:50]
pcashape$x[,1:50]
pcashape$x[,,1:50]
pcashape$x[1:50,]
test2 <- pcashape$x[1:75,]
tree2 <- hclust(dist(test2))
ggtree(tree2)
ggtree(tree2, layout = "circular")
ggtree(tree2, layout = "circular") + nodelab()
ggtree(tree2, layout = "circular") + geom_tippoint()
test2 <- pcashape$x[1:40,]
tree2 <- hclust(dist(test2))
ggtree(tree2, layout = "circular") + geom_tippoint()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org')  # Momocsのチェックとインストール
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')  #tidyverseのチェックとインストール
if(!require("rio")) install.packages('rio', repos='http://cran.us.r-project.org')  #rioのチェックとインストール
library(Momocs)  #Momocsのアクティベート
library(tidyverse)  #tidyverseのアクティベート
View(database)
head(database)  #databaseの先頭数行を呼び出す
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)  #Archaeological_Unitを因子型(factor)に変更
is.factor(database$Archaeological_Unit) # check to see the data is now of type 'character'／データが文字列(character)かどうかを確認
summary(database$Archaeological_Unit) #Archaeological_Unitを集計
shape <- Out(tpsdata$coo, fac = database) # incorporating our database as our factors／tps座標データをアウトラインに変換し，データベースの因子型データArchaeological_unitとともにshapeに格納
shape # call the object／オブジェクトの呼び出し
panel(shape, main = "", fac = 'Archaeological_Unit')  #「かたち」のデータを，考古学的文化ごとに色分けして可視化
panel(shape)
panel(shape, main = "", fac = 'Archaeological_Unit')  #「かたち」のデータを，考古学的文化ごとに色分けして可視化
panel(shape, main = "", fac = 'Archaeological_Unit')  #「かたち」のデータを，考古学的文化ごとに色分けして可視化
mosaic(shape, fac = "Archaeological_Unit")
mosaic(shape, fac = 'Archaeological_Unit')
mosaic(shape, ~Archaeological_Unit)
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[7], col = "grey", main = "Artefact #7")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1:3], col = "grey", main = "Artefact #7")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "green", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
stack(shape)
shape <- coo_center(shape)  # 基準点を揃える
shape <- coo_scale(shape)  #　スケールを揃える
shape <- coo_close(shape)  # 開曲線を閉じる
stack(shape, main = "")　　# shapeの重ね合わせ表示
stack(shape, main = "")
calibrate_harmonicpower_efourier(shape, nb.h = 20, plot = FALSE)  #資料番号4(id=4)の調和数を20まで(nb.h=20)推定
calibrate_reconstructions_efourier(shape)  # shapeの復元を計算
calibrate_deviations_efourier(shape)  # オリジナルと計算結果の「かたち」の偏差を計算
efashape <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)  # shapeのアウトライン係数を第11調和まで計算しefashapeに格納
efashape
efouriertest <- efourier(shape, nb.h = 11, smooth.it = 0, norm = FALSE)
PCAtest <- PCA(efouriertest)
plot_PCA(PCAtest)
PContrib(PCAtest)
PCContrib(PCAtest)
Pcontrib(PCAtest)
PCcontrib(PCAtest)
PCcontrib(PCAtest, nax = 1:5)
rm(PCAtest)
rm(efouriertest)
pcashape <- PCA(efashape)  #EFAの結果をPCAクラスに変換しpcashapeに格納
PCcontrib(pcashape, nax = 1:5)  #EFAの主成分分析結果を第1～第5主成分軸まで計算表示
scree(pcashape)  #pcashapeの各主成分軸の寄与度を計算
plot_PCA(pcashape, axes = c(1,2), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  #PC1+PC2による考古学的文化により色分けした散布図を描画
plot_PCA(pcashape, axes = c(1,3), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  #PC1+PC3 (axes=c(1,3))による考古学的文化により色分けした散布図を描画
boxplot(pcashape, ~Archaeological_Unit, nax = 1:5)  # pcashapeの考古学的文化ごとの箱ひげ図を描画
dashape <- LDA(pcashape, ~Archaeological_Unit, retain = 0.95)  # pcashapeと「考古学的文化」に対し線形判別分析を実施，dashapeに格納
dashape$CV.correct  #dashapeを交差検証
dashape$CV.ce  #交差検証表を作成
classification_metrics(dashape)
plot_LDA(dashape, axes = c(1,2), zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  # dashapeの線形判別分析の結果を散布図として描画
shape %>% efourier(nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = TRUE) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% MANOVA()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% MANOVA(~Archaeological_Unit)
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% MANOVA_PW(~Archaeological_Unit)
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA(~Archaeological_Unit) %>% layer_ellipses()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA(fac = Archaeological_Unit) %>% layer_ellipses()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA(fac = Archaeological_Unit) %>% Plot_PCA %>% layer_ellipses()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA(fac = Archaeological_Unit) %>% plot_PCA()
shape %>% efourier(nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = TRUE) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11) %>% PCA() %>% LDA(fac = "Archaeological_Unit")
shape %>% efourier(nb.h = 15) %>% PCA() %>% LDA(fac = "Archaeological_Unit")
MANOVA(pcashape, ~Archaeological_Unit, retain = 0.95)  # pcashapeと「考古学的文化」のMANOVAを実施
MANOVA_PW(pcashape, ~Archaeological_Unit, retain = 0.95)  #ペアワイズ法MANOVAを実施
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)  # pcashapeと「考古学的文化」によるクラスター樹形図，ユークリッド法，クラスター数=4
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", retain = 0.95)  # pcashapeと「考古学的文化」によるクラスター樹形図，ユークリッド法，クラスター数=4
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95) + theme_gray()  # 背景をtheme_greyに変更
KMEANS(pcashape, centers = 4)  # クラスター中心(分離数)を4としてk-means法を実施
classification <- KMEANS(pcashape, centers = 4)
classification$cluster
clusttree <- HCLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)
clusttree <- CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)
ggtree(hclust(dist(pcashape$x)))
library(ggtree)
ggtree(hclust(dist(pcashape$x)))
ggtree(hclust(dist(pcashape$x)), layout = "circular")
ggtree(hclust(dist(pcashape$x)), layout = "circular") + geom_nodepoint()
ggtree(hclust(dist(pcashape$x)), layout = "circular") + geom_tippoint()
meanshapes <- MSHAPES(efashape, ~Archaeological_Unit)  # efashapeと「考古学的文化」により平均的「かたち」を取得しmeanshapesに格納
meanshapes <- MSHAPES(efashape, ~Archaeological_Unit)  # efashapeと「考古学的文化」により平均的「かたち」を取得しmeanshapesに格納
plot_MSHAPES(meanshapes, size = 0.75)  # meanshapesを描画，左下～右上中央が個別の「考古学的文化」の剥片尖頭器の平均的「かたち」
coo_length(shape)
coo_centsize(shape)
centroidsize <- as_tibble(coo_centsize(shape))  # shapeの外形のセントロイド・サイズを行列にしてcentroidsizeに格納
centroidsize <- rename(centroidsize, cs = "value")  #データ行列内のcs列を数値型に変換
pcascores <- as_tibble(pcashape$x)  # pcashapeのxを行列にしてpcascoresに格納
databasedata <- cbind(database,centroidsize, pcascores)  # database, centroidosize, pcascoresを連結してdatabasedataに格納
head(databasedata)  #databasedataの先頭6行を表示
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 2, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth(method=lm, se=FALSE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")  # PC1とセントロイドサイズの散布図を描画し回帰直線を追加
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 2, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth(method=loess, se=TRUE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")  # PC1とセントロイドサイズの散布図を描画し回帰直線を追加
cor(databasedata$PC1, databasedata$cs)  #PC1とセントロイドサイズの相関
cor.test(databasedata$PC1, databasedata$cs)  #同上を検証
files <- list.files("C:/Users/cshog/Desktop/pottery", full.names=TRUE)
files
out   <- import_jpg(files)
od    <- Out(out)
panel(od)
od %>% coo_center() %>% coo_scale() %>% efourier(nb.h = 5) %>% PCA() %>% plot_PCA()
od %>% coo_center() %>% coo_scale() %>% efourier(nb.h = 5) %>% CLUST()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org')  # Momocsのチェックとインストール
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')  #tidyverseのチェックとインストール
if(!require("rio")) install.packages('rio', repos='http://cran.us.r-project.org')  #rioのチェックとインストール
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)  #Archaeological_Unitを因子型(factor)に変更
is.factor(database$Archaeological_Unit) # check to see the data is now of type 'character'／データが文字列(character)かどうかを確認
shape <- Out(tpsdata$coo, fac = database) # incorporating our database as our factors／tps座標データをアウトラインに変換し，データベースの因子型データArchaeological_unitとともにshapeに格納
shape # call the object／オブジェクトの呼び出し
shape <- coo_center(shape)  # 基準点を揃える
shape <- coo_scale(shape)  #　スケールを揃える
shape <- coo_close(shape)  # 開曲線を閉じる
stack(shape, main = "")　　# shapeの重ね合わせ表示
efashapenorm <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)
efashapenorm <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)
efashape <- efourier(shape, nb.h = 11, smooth.it = 0, norm = FALSE)
PCcontrib(efashapenorm)
pcashape <- PCA(efashape)  #EFAの結果をPCAクラスに変換しpcashapeに格納
pcashapenorm <- PCA(efashapenorm)
PCcontrib(efashapenorm)
PCcontrib(pcashapenorm)
pcashapenorm <- PCA(efashapenorm, nax = 1:4)
pcashapenorm <- PCA(efashapenorm, nax = 4)
PCcontrib(pcashapenorm, nax = 1:4)
PCcontrib(pcashape, nax = 1:4)
plot_PCA(pcashape, morphospace = "XY")
plot_PCA(pcashape)
plot_PCA(pcashape, ~Archaeological_Unit)
efashape %>% LDA()
efashape %>% LDA(fac = Archaeological_Unit)
efashape %>% LDA(fac = "Archaeological_Unit")
efashapenorm %>% LDA(fac = "Archaeological_Unit")
efashape %>% LDA(fac = "Archaeological_Unit")
plot_PCA(pcashape)
plot_PCA(pcashapenorm)
plot_PCA(pcashape)
library(Momocs)
plot_PCA(pcashape)
shape %>% efourier(norm = FALSE) %>% PCA() %>% plot_PCA()
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib()
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA(nax = 1:5)
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
hclust(dist(pcashape$x))
tree <- hclust(dist(pcashape$x))
library(Rphylip)
contmltree <- RContml(tree)
contmltree <- Rcontml(tree)
contmltree <- Rcontml(hclust(dist(pcashape$x)))
(hclust(dist(pcashape$x)))
as.matrix((hclust(dist(pcashape$x))))
Rcontml(as.matrix((hclust(dist(pcashape$x)))))
treeml <- Rcontml(as.matrix((hclust(dist(pcashape$x)))))
pcashape[1:50]
pcashape$x[,1:50]
pcashape$x[1:50]
pcashape$x[,1:50]
pcashape$x[,,1:50]
treeml <- Rcontml(as.matrix((hclust(dist(pcashape$x)))))
treeml <- Rcontml(((hclust(dist(pcashape$x)))))
pcashape
pcashape <- PCA(efashape)
pcashape <- PCA(efashape)
library(Momocs)
pcashape <- PCA(efashape)
treeml <- Rcontml(((hclust(dist(pcashape$x)))))
pcashape$x
pcashape$x[1:50]
pcashape$x[,1:50]
pcashape$x[1:50,]
testtree <- Rcontml(pcashape$x[1:50,])
library(ggtree)
ggtree(testtree)
ggtree(testtree, layout = "circular")
ggtree(testtree, layout = "circular", branch.length = "none")
ggtree(testtree, layout = "circular", branch.length = "none") + geom_point2()
ggtree(testtree, layout = "circular", branch.length = "none") + geom_tippoint()
outlines_combined_nicholas_2016 <- readRDS("C:/Users/cshog/Desktop/outlines_combined_nicholas_2016.RDS")
outlines_combined_nicholas_2016
test <- outlines_combined_nicholas_2016
library('Momocs')
test
panel(test)
stack(test)
test <- coo_centre(test)
test <- coo_scale(test)
stack(test)
calibrate_harmonicpower_efourier(test)
calibrate_harmonicpower_efourier(outlines_combined_nicholas_2016)
eftest <- efourier(test, nb.h = 7)
PCA(eftest)
plot.PCA(eftest)
eftest %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 7, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% PCcontrib()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA(nax = 1:5)
test %>% efourier(nb.h = 19, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% PCcontrib(nax = 1:5)
outlines_combined_nicholas_2016 <- readRDS("C:/Users/cshog/Desktop/outlines_combined_nicholas_2016.RDS")
library("Momocs")
calibrate_harmonicpower_efourier(outlines_combined_nicholas_2016)
sum.of.squares <- function(x,y) {x^2 + y^2}
x <- 2
y <- 3
sum.of.squares(2,3)
sum.of.squares(3,4)
pcashape
View(database)
install.packages("shinydashboard")
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
install.packages("flexdashboard")
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
head(mtcars, n = input$rows)
renderTable({
head(mtcars)
})
install.packages("DT")
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)
shape <- Out(tpsdata$coo, fac = database)
shape <- coo_center(shape)
shape <- coo_scale(shape)
library(flexdashboard)
library(shiny)
library(DT)
library(Momocs)
library(tidyverse)
library(rio)
library(ggplot2)
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)
shape <- Out(tpsdata$coo, fac = database)
shape <- coo_center(shape)
shape <- coo_scale(shape)
shape <- coo_close(shape)
efashape <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)
pcashape <- PCA(efashape)
dfshape <- as_df(pcashape)
View(dfshape)
library(archdata)
database <- archdata::Handaxes
database <- archdata(Handaxes)
database <- Handaxes
database <- data(Handaxes)
data(Handaxes)
rm(database)
head(Handaxes)
View(Handaxes)
Handaxes[1:5]
Handaxes[,1:5]
Handaxes[1]
Handaxes[,1]
Handaxes[,,1]
Handaxes[1,]
Handaxes[1:5,]
summary(Handaxes)
rm(Handaxes)
data(DartPoints)
View(DartPoints)
dist(DartPoint[,5:6])
dist(DartPoints[,5:6])
clust(dist(DartPoints[,5:6]))
hclust(dist(DartPoints[,5:6]))
plot(hclust(dist(DartPoints[,5:6])))
DartPoints
median(DartPoints$Length)
range(DartPoints$Length)
mean(DartPoints$Length)
plot(norm())
hist(DartPoints$Length)
sd(DartPoints$Length)
library(tidyverse)
ggplot(DartPoints, aes(Length)) + geom_hist()
ggplot(DartPoints, aes(Length)) + geom_histogram()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_histogram()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_area()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_bin2d()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_curve()
ggplot(DartPoints, aes(Length, colour = Name)) + geom_density()
t.test(DartPoints$Length[group == Darl], DartPoints == Ensor)
t.test(DartPoints$Length[Name == Darl], DartPoints[Name == Ensor])
t.test(DartPoints[Name == Darl], DartPoints[Name == Ensor])
new_database <- filter(DartPoints, Name == Ensor, Name == Darl)
new_database <- filter(DartPoints, Name == Ensor | Name == Darl)
new_database <- filter(DartPoints, Name == "Ensor" | Name == "Darl")
View(new_database)
new_database <- select(DartPoints, Name, Length)
View(new_database)
new_database <- filter(DartPoints, Name == "Ensor" | Name == "Darl")
new_database <- select(new_database, Name, Length)
new_database <- filter(DartPoints, Name == "Ensor" | Name == "Darl") %>% select(Name, Length)
ggplot(new_database, aes(Length, colour = Name)) + geom_density()
skew(DartPoints$Length)
wilcox.test(Length ~ Name, data = new_database)
### MEASURES OF CENTRAL TENDENCY (EXPLORATORY)
head(DartPoints)
### MEASURES OF CENTRAL TENDENCY (EXPLORATORY)
DartPoints$Name
new_database <- filter(DartPoints, Name == "Wells" | Name == "Pedernales") %>% select(Name, Length)
ggplot(new_database, aes(Length, colour = Name)) + geom_density()
wilcox.test(Length ~ Name, data = new_database)
new_database <- filter(DartPoints, Name == "Wells" | Name == "Pedernales" | Name == "Travis") %>% select(Name, Length)
ggplot(new_database, aes(Length, colour = Name)) + geom_density()
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anova(Length ~ Name, data = new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anova(Name ~ Length, data = new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anova(new_database$Name ~ new_database$Length)
new_database <- filter(DartPoints, Name == "Wells" | Name == "Pedernales" | Name == "Travis") %>% select(Name, Length)
View(new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
lm(new_database$Name ~ new_database$Length)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
lm(Name ~ Length, data = new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anove(lm(Name ~ Length, data = new_database))
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
anova(lm(Name ~ Length, data = new_database))
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
lm(Name ~ Length, data = new_database)
### MULTIPLE FACTORS VS. QUANTITY (ANOVA) / NON-NORMAL (KRUSKAL-WALLIS)
stattest <- lm(Name ~ Length, data = new_database)
stattest$model
stattest
anova(stattest)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_density() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_histogram() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_abline() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_point() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_dotplot() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, colour = Name)) + geom_density() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_quantile() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_point() + geom_quantile() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_rug() + geom_point() + geom_quantile() ### (EXPLORATORY)
ggplot(DartPoints, aes(Length, Width, colour = Name)) + geom_rug() + geom_point() + geom_smooth() ### (EXPLORATORY)
<style>
.small-code pre code {
font-size: 1em;
}
</style>
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
install.packages("xaringan")
options(htmltools.dir.version = FALSE)
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
library(xaringan)
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
vdiffr:::vdiffrAddin()
install.packages("gdtools")
xaringan:::inf_mr()
servr::daemon_stop(1)
xaringan:::inf_mr()
devtools::install_github("rstudio/fontawesome")
install.packages("remotes")
devtools::install_github("rstudio/fontawesome")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
warnings()
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-4.0.0/library")
detach("package:GUImorph", unload = TRUE)
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
require(tcltk)
require(tcltk2)
require(parallel)
require(geomorph)
require(Rvcg)
require(Morpho)
require(digest)
install.packages("Morpho")
require(tcltk)
require(tcltk2)
require(parallel)
require(geomorph)
require(Rvcg)
require(Morpho)
require(digest)
install.packages("C:/Users/cshog/Desktop/GUImorph-master-1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph-master-1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph-master/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(Guimorph)
library(GUImorph)
GUImorph()
library(GUImorph)
.libPaths()
library(GUImorph)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph-master/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
library(GUImorph)
.libPaths()
find.package("devtools")
remove.packages("GUImorph", lib="~/R/win-library/4.0")
remove.packages("GUImorph", lib="C:/Program Files/R/R-4.0.0/library")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
Sys.which("make")
library(GUImorph)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
remove.packages("GUImorph", lib="~/R/win-library/4.0")
install.packages("C:/Users/cshog/Desktop/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
detach("package:GUImorph", unload = TRUE)
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-gmm_liverpool_2020/workshop_two")
tutuli_lm <- Momocs::import_tps("vestergaard_and_hoggard_2019.TPS")
tutuli_data <- readr::read_csv("vestergaard_and_hoggard_2019.csv")
saveRDS(tutuli_lm, file =  here::here("tutuli_lm.rds"))
saveRDS(tutuli_data, file =  here::here("tutuli_data.rds"))
